@page "/"
@page "/movies"

@implements IDisposable

@using BestMovies.WebApp.Repositories
@using BestMovies.WebApp.Components
@using BestMovies.Shared.Dtos.Movies
@using EventHandler = BestMovies.WebApp.Services.EventHandler
@using BestMovies.WebApp.Authorization
@using BestMovies.WebApp.Repositories.Impl
@using BestMovies.WebApp.Services

<PageTitle>Movies</PageTitle>

<MudContainer Class="d-flex flex-column gap-4 justify-center pa-4" MaxWidth="MaxWidth.ExtraExtraLarge">
    
    <MovieCardList Title="Popular now" Movies="_popularMovies" SkeletonCardsCount="5"/>
    
    @if (_userInformation?.ClientPrincipal is not null)
    {
        <MovieCardList Title="Want to watch" Movies="_savedMovies" ShowMessageIfEmpty="true" MessageIfEmpty="You did not add any movie to your list yet." SkeletonCardsCount="4"/>
    }
    
    @if (_topRatedMovies is not null && _topRatedMovies.Any())
    {
        <MovieCardList Title="Top Rated By Our Users" Movies="_topRatedMovies" SkeletonCardsCount="5"/>
    }
    
    @if (_moviesPerGenre is null)
    {
        foreach (var genre in _skeletonGenres)
        {
            <MovieCardList Title= "@genre" SkeletonCardsCount="5"/>
        }
    }
    else
    {
        foreach (var moviePerGenre in _moviesPerGenre)
        {
            <MovieCardList Title= "@moviePerGenre.genre" Movies="@moviePerGenre.movies" SkeletonCardsCount="5"/>
        }
    }
</MudContainer>


@code {

    [Inject]
    protected EventHandler EventHandler { get; set; } = default!;

    [Inject]
    protected IMoviesRepository MoviesRepository { get; set; } = default!;
    
    [Inject]
    protected IGenresRepository GenresRepository { get; set; } = default!;
    
    [Inject]
    protected ISavedMoviesRepository SavedMoviesRepository { get; set; } = default!;

    [Inject]
    protected IAuthService AuthService { get; set; } = default!;
    
    // Used for loading skeleton
    private readonly string[] _skeletonGenres = {"Action", "Comedy"};

    private IEnumerable<SearchMovieDto>? _popularMovies;
    private IEnumerable<SearchMovieDto>? _savedMovies;
    private IEnumerable<SearchMovieDto>? _topRatedMovies;
    private (string genre, IEnumerable<SearchMovieDto> movies)[]? _moviesPerGenre;

    private UserInformation? _userInformation;

    protected override async Task OnInitializedAsync()
    {
        EventHandler.OnChange += OnChange;

        await FetchUserInfo();
        await FetchPopularMovies();
        await FetchTopRatedMovies();
        
        var tasks = new[]
        {
            FetchSavedMovies(),
            FetchPopularMoviesPerGenre()
        };

        await Task.WhenAll(tasks);
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task FetchUserInfo() => _userInformation = await AuthService.RetrieveUserInformation();
    private async Task FetchPopularMovies() => _popularMovies = await MoviesRepository.GetPopularMovies();
    private async Task FetchTopRatedMovies() => _topRatedMovies = await MoviesRepository.GetTopRatedMovies();

    private async Task FetchSavedMovies()
    {
        _savedMovies = await SavedMoviesRepository.GetSavedMovies(isWatched: false);
        await InvokeAsync(StateHasChanged);
    }

    private async Task FetchPopularMoviesPerGenre()
    {
        var genres = await GenresRepository.GetAllGenres();
        
        var tasks = genres
            .Take(4)
            .Select(async g => (g, await MoviesRepository.GetPopularMovies(g)));

        _moviesPerGenre = await Task.WhenAll(tasks);
    }

    private async void OnChange()
    {
        if (_userInformation?.ClientPrincipal is not null)
        {
            await FetchSavedMovies();
        }
    }

    public void Dispose() => EventHandler.OnChange -= OnChange;

}